system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 0.1, cost = 100,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 1, cost = 10,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
pred_numeric
max(pred_numeric)
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 10, cost = 10,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
max(pred_numeric)
pred_numeric[round(pred_numeric) == y$y]
y$y[round(pred_numeric) == y$y]
y$y[round(pred_numeric) == y$y && y$y == 1]
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 10, cost = 100,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 10, cost = 1,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 10, cost = .1,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 5, cost = .1,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 1, cost = .01,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 50, cost = 1,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 100, cost = 1,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 20, cost = 1,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 10, cost = 1,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 200, cost = 10,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
xsim <- x[sample(nrow(x), nrow(y)/2),];
system.time(svm_model <- parallelSVM::parallelSVM(xsim, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 200, cost = 1,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
names(data)
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 0.004487103, cost = 3,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]),"\n");
y$y[round(pred_numeric) == 1]
sum(y$y[round(pred_numeric) == 1])
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 1, cost = 10,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = .1, cost = 100,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = .1, cost = 1000,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = .1, cost = 10000,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = .1, cost = 512,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 1, cost = 512,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 10, cost = 512,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 10, cost = 1000,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 10, cost = 256,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome,euribor3m,job));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = .1, cost = 512,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
x <- subset(data, select = c(poutcome));
y <- subset(data, select = y);
## woah - cannot use just 't', apparently messes with built-in functions:
## https://stats.stackexchange.com/questions/233531/object-of-type-closure-is-not-subsettable
test_t <- subset(test, select = c(-id));
xsim <- x[sample(nrow(x), nrow(y)),];
system.time(svm_model <- parallelSVM::parallelSVM(x, y$y,
type = "C-classification",
kernel = "radial",
seed = svmseed,
probability = TRUE,
gamma = 0.004487103, cost = 3,
numberCores = parallel::detectCores()-1));
## performance
system.time(pred <- predict(svm_model, x, decision.values = TRUE, probability = TRUE));
pred <- attributes(pred);
pred_numeric <- sapply(1:nrow(pred$probabilities),
FUN = function(X) {
pred$probabilities[X,][names(pred$probabilities[X,]) == 1]});
cat("Performance : [",
length(pred_numeric[round(pred_numeric) == y$y])/nrow(y),
"], #y = ", length(round(pred_numeric)[round(pred_numeric) == 1]), " out of ", sum(y$y[round(pred_numeric) == 1]), "\n");
