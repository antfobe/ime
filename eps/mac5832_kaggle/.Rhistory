while ( x %% 2 != 1 ) {
x = x / 2;
itx = itx + 1;
}
if ( itx != 0 ) {
pow2array = c(pow2array,itx);
}
if ( x == 1 ) {
return (pow2array);
}
return (collatzPows(3*x+1, pow2array));
}
collatzLog2 <- function (n, pow2array) {
if ( length(pow2array) == 1 ) {
return (
log2(3*n + 1) #/ 2^(pow2array[1])
);
}
return (log2(sum
(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
) + 3^(length(pow2array))*n + 3^(length(pow2array)-1)
) #/ 2^(sum(pow2array))
);
}
collatzCheck <- function (n, pow2array) {
if ( length(pow2array) == 1 ) {
return (
(3*n + 1) / 2^(pow2array[1])
);
}
return ((sum
(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
) + 3^(length(pow2array))*n + 3^(length(pow2array)-1)
) / 2^(sum(pow2array))
);
}
collatzFuzz <- function (pow2array) {
if ( length(pow2array) == 1 ) {
# if ( pow2array[1] % 2) {
return (
(2^(pow2array[1])-1) / 3
);
# } else {
#   return (2^(pow2array));
# }
}
return (
(-(sum(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
)) - 3^(length(pow2array)-1)  + 2^(sum(pow2array))
) /(3^(length(pow2array)))
);
}
collatzExpand <- function(pow2array, s=c()) {
if ( length(pow2array) == 1 ) {
return (c((2^(pow2array[1])-1)/3,s));
}
return (collatzExpand(pow2array[1:length(pow2array)-1], c((2^(pow2array[length(pow2array)])-1)/3,s)))
}
collatzPows <- function (x, pow2array = c()) {
itx = 0;
while ( x %% 2 != 1 ) {
x = x / 2;
itx = itx + 1;
}
if ( itx != 0 ) {
pow2array = c(pow2array,itx);
}
if ( x == 1 ) {
return (pow2array);
}
return (collatzPows(3*x+1, pow2array));
}
collatzLog2 <- function (n, pow2array) {
if ( length(pow2array) == 1 ) {
return (
log2(3*n + 1) #/ 2^(pow2array[1])
);
}
return (log2(sum
(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
) + 3^(length(pow2array))*n + 3^(length(pow2array)-1)
) #/ 2^(sum(pow2array))
);
}
collatzCheck <- function (n, pow2array) {
if ( length(pow2array) == 1 ) {
return (
(3*n + 1) / 2^(pow2array[1])
);
}
return ((sum
(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
) + 3^(length(pow2array))*n + 3^(length(pow2array)-1)
) / 2^(sum(pow2array))
);
}
collatzFuzz <- function (pow2array) {
if ( length(pow2array) == 1 ) {
if ( pow2array[1] %% 2) {
return (
(2^(pow2array[1])-1) / 3
);
} else {
return (2^(pow2array[1]));
}
}
return (
(-(sum(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
)) - 3^(length(pow2array)-1)  + 2^(sum(pow2array))
) /(3^(length(pow2array)))
);
}
collatzExpand <- function(pow2array, s=c()) {
if ( length(pow2array) == 1 ) {
return (c((2^(pow2array[1])-1)/3,s));
}
return (collatzExpand(pow2array[1:length(pow2array)-1], c((2^(pow2array[length(pow2array)])-1)/3,s)))
}
collatzFuzz(collatzPows(14))
collatzPows <- function (x, pow2array = c()) {
itx = 0;
while ( x %% 2 != 1 ) {
x = x / 2;
itx = itx + 1;
}
if ( itx != 0 ) {
pow2array = c(pow2array,itx);
}
if ( x == 1 ) {
return (pow2array);
}
return (collatzPows(3*x+1, pow2array));
}
collatzLog2 <- function (n, pow2array) {
if ( length(pow2array) == 1 ) {
return (
log2(3*n + 1) #/ 2^(pow2array[1])
);
}
return (log2(sum
(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
) + 3^(length(pow2array))*n + 3^(length(pow2array)-1)
) #/ 2^(sum(pow2array))
);
}
collatzCheck <- function (n, pow2array) {
if ( length(pow2array) == 1 ) {
return (
(3*n + 1) / 2^(pow2array[1])
);
}
return ((sum
(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
) + 3^(length(pow2array))*n + 3^(length(pow2array)-1)
) / 2^(sum(pow2array))
);
}
collatzFuzz <- function (pow2array) {
if ( length(pow2array) == 1 ) {
if ( !pow2array[1] %% 2) {
return (
(2^(pow2array[1])-1) / 3
);
} else {
return (2^(pow2array[1]));
}
}
return (
(-(sum(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
)) - 3^(length(pow2array)-1)  + 2^(sum(pow2array))
) /(3^(length(pow2array)))
);
}
collatzExpand <- function(pow2array, s=c()) {
if ( length(pow2array) == 1 ) {
return (c((2^(pow2array[1])-1)/3,s));
}
return (collatzExpand(pow2array[1:length(pow2array)-1], c((2^(pow2array[length(pow2array)])-1)/3,s)))
}
collatzFuzz(collatzPows(14))
collatzFuzz(collatzPows(13))
collatzPows <- function (x, pow2array = c()) {
itx = 0;
while ( x %% 2 != 1 ) {
x = x / 2;
itx = itx + 1;
}
if ( itx != 0 ) {
pow2array = c(pow2array,itx);
}
if ( x == 1 ) {
return (pow2array);
}
return (collatzPows(3*x+1, pow2array));
}
collatzLog2 <- function (n, pow2array) {
if ( length(pow2array) == 1 ) {
return (
log2(3*n + 1) #/ 2^(pow2array[1])
);
}
return (log2(sum
(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
) + 3^(length(pow2array))*n + 3^(length(pow2array)-1)
) #/ 2^(sum(pow2array))
);
}
collatzCheck <- function (n, pow2array) {
if ( length(pow2array) == 1 ) {
return (
(3*n + 1) / 2^(pow2array[1])
);
}
return ((sum
(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
) + 3^(length(pow2array))*n + 3^(length(pow2array)-1)
) / 2^(sum(pow2array))
);
}
collatzFuzz <- function (pow2array) {
if ( length(pow2array) == 1 ) {
if ( !pow2array[1] %% 2) {
return (
(2^(pow2array[1])-1) / 3
);
} else {
return (2^(pow2array[1]) * 3 + 1);
}
}
return (
(-(sum(unlist
(lapply(2:length(pow2array)-1,
FUN=function(X) {
3^(length(pow2array)-X-1)*2^(sum(pow2array[1:X]))
}
)
)
)) - 3^(length(pow2array)-1)  + 2^(sum(pow2array))
) /(3^(length(pow2array)))
);
}
collatzExpand <- function(pow2array, s=c()) {
if ( length(pow2array) == 1 ) {
return (c((2^(pow2array[1])-1)/3,s));
}
return (collatzExpand(pow2array[1:length(pow2array)-1], c((2^(pow2array[length(pow2array)])-1)/3,s)))
}
collatzFuzz(collatzPows(13))
collatzFuzz(collatzPows(14))
collatzFuzz(collatzPows(14)) * 3 + 1
collatzFuzz(collatzPows(15)) * 3 + 1
collatzFuzz(collatzPows(46)) * 3 + 1
lapply(1:10, FUN = sum())
lapply(1:10, FUN = sum
)
sum(lapply(1:10, FUN = sum))
ls
rm(pow2sarray)
collatzPows(3)
collatzFuzz(c(3,3))
collatzFuzz(c(1,4))
1 %/% .2
ls()
help("seq")
collatzPows(seq(from = 11, to = 1111, by = 2))
warnings
(seq(from = 11, to = 111, by = 2))
lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)
length(lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows))
lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)[51]
lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)[50]
length(lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)[50])
length(unlist(lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)[50]))
sum(unlist(lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)[50]))/41
lapply(lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows), FUN = function (X){sum(X)/length(X)})
lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)[9]
lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)[50]
lapply(seq(from = 11, to = 111, by = 2), FUN = collatzPows)
collatzFuzz(c(1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzPows(81)
collatzPows(3)
collatzPows(9)
collatzPows(27)
collatzPows(243)
collatzPows(3**3)
collatzPows(3**5)
collatzPows(3**6)
collatzPows(3**7)
collatzPows(3**8)
collatzPows(3**9)
collatzPows(3**10)
collatzFuzz(c(1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(2, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(3, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(3, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(4, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(5, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(1, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(3, 1, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(3, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(4, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
collatzFuzz(c(2, 1, 2, 1, 1, 2, 1, 1, 1, 1, 2, 2, 1, 2, 1, 1, 2, 1, 1, 1, 2, 3, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 4, 2, 2, 4, 3, 1, 1, 5, 4))
setwd("~/projects/ime/eps/mac5832_kaggle/")
## Add packages
if(!require("install.load")) {install.packages("install.load"); library("install.load")}
lapply(c('keras', 'tidyverse'), FUN = install_load);
dim(x_train)
#!/usr/bin/R
## Heavily based on https://github.com/leonjessen/keras_tensorflow_on_iris
## Ultimate kudos to you Leon Jessen
## Add packages
if(!require("install.load")) {install.packages("install.load"); library("install.load")}
lapply(c('keras', 'tidyverse'), FUN = install_load);
## Load data, remove "id" field
data <- subset(read.csv(file = "train.csv"), select = c(-id));
test <- subset(read.csv(file = "test.csv"), select = c(-id));
## Prepare/encode data, non-numeric fields as numeric (positive integer), scales, etc
nn_dat = data %>% as_tibble %>%
mutate(age_feat = scale(age),
job_feat = scale(as.numeric(job)),
marital_feat = scale(as.numeric(marital)),
education_feat = scale(as.numeric(education)),
default_feat = scale(as.numeric(default)),
housing_feat = scale(as.numeric(housing)),
loan_feat = scale(as.numeric(loan)),
contact_feat = scale(as.numeric(contact)),
month_feat = scale(month),
weekday_feat = scale(day_of_week),
campaign_feat = scale(campaign),
pdays_feat = scale(pdays),
previous_feat = scale(previous),
poutcome_feat = scale(as.numeric(poutcome)),
employmnt_feat = scale(emp.var.rate),
priceidx_feat = scale(cons.price.idx),
confidx_feat = scale(cons.conf.idx),
euribor_feat = scale(euribor3m),
nremployd_feat = scale(nr.employed),
class_num = y,
class_label = c("Prediction")) %>%
select(contains("feat"), class_num, class_label)
nn_dat %>% head(3)
## Partition test dataset & size as 1/5 of all data
test_f = 0.20
nn_dat = nn_dat %>%
mutate(partition = sample(c('train','test'), nrow(.), replace = TRUE, prob = c(1 - test_f, test_f)))
## Create training and testing data
x_train = nn_dat %>% filter(partition == 'train') %>% select(contains("feat")) %>% as.matrix
y_train = nn_dat %>% filter(partition == 'train') %>% pull(class_num) %>% to_categorical()
x_test  = nn_dat %>% filter(partition == 'test')  %>% select(contains("feat")) %>% as.matrix
y_test  = nn_dat %>% filter(partition == 'test')  %>% pull(class_num) %>% to_categorical()
dim(x_train)
dim(x_train[1,])
dim(x_train[1])
dim(x_train[,1])
x_train[1,]
model = keras_model_sequential()
model %>%
layer_conv_1d(units = 19, activation = 'relu', input_shape = 19) %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_dense(units = 2, activation = 'softmax')
model = keras_model_sequential()
model %>%
layer_conv_1d(activation = 'relu', input_shape = 19) %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_dense(units = 2, activation = 'softmax')
## Set nn architecture
model = keras_model_sequential()
model %>%
layer_conv_1d(activation = 'relu', input_shape = 19, filters = 6) %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_dense(units = 2, activation = 'softmax')
## Set nn architecture
model = keras_model_sequential()
model %>%
layer_conv_1d(activation = 'relu', input_shape = 19, filters = 6, kernel_size = 1) %>%
layer_max_pooling_1d(pool_size = 2) %>%
layer_dense(units = 2, activation = 'softmax')
#!/usr/bin/R
## Heavily based on https://github.com/leonjessen/keras_tensorflow_on_iris
## Ultimate kudos to you Leon Jessen
## Add packages
if(!require("install.load")) {install.packages("install.load"); library("install.load")}
lapply(c('keras', 'tidyverse'), FUN = install_load);
## Load data, remove "id" field
data <- subset(read.csv(file = "train.csv"), select = c(-id));
test <- subset(read.csv(file = "test.csv"), select = c(-id));
## Prepare/encode data, non-numeric fields as numeric (positive integer), scales, etc
nn_dat = data %>% as_tibble %>%
mutate(age_feat = scale(age),
job_feat = scale(as.numeric(job)),
marital_feat = scale(as.numeric(marital)),
education_feat = scale(as.numeric(education)),
default_feat = scale(as.numeric(default)),
housing_feat = scale(as.numeric(housing)),
loan_feat = scale(as.numeric(loan)),
contact_feat = scale(as.numeric(contact)),
month_feat = scale(month),
weekday_feat = scale(day_of_week),
campaign_feat = scale(campaign),
pdays_feat = scale(pdays),
previous_feat = scale(previous),
poutcome_feat = scale(as.numeric(poutcome)),
employmnt_feat = scale(emp.var.rate),
priceidx_feat = scale(cons.price.idx),
confidx_feat = scale(cons.conf.idx),
euribor_feat = scale(euribor3m),
nremployd_feat = scale(nr.employed),
class_num = y,
class_label = c("Prediction")) %>%
select(contains("feat"), class_num, class_label)
nn_dat %>% head(3)
## Partition test dataset & size as 1/5 of all data
test_f = 0.20
nn_dat = nn_dat %>%
mutate(partition = sample(c('train','test'), nrow(.), replace = TRUE, prob = c(1 - test_f, test_f)))
## Create training and testing data
x_train = nn_dat %>% filter(partition == 'train') %>% select(contains("feat")) %>% as.matrix
y_train = nn_dat %>% filter(partition == 'train') %>% pull(class_num) %>% to_categorical()
x_test  = nn_dat %>% filter(partition == 'test')  %>% select(contains("feat")) %>% as.matrix
y_test  = nn_dat %>% filter(partition == 'test')  %>% pull(class_num) %>% to_categorical()
## Set nn architecture
model = keras_model_sequential()
model %>%
layer_dense(units = 19, activation = 'relu', input_shape = 19) %>%
layer_dense(units = 2, activation = 'softmax')
model %>% summary
## Compile architecture
model %>% compile(
loss      = 'categorical_crossentropy',
optimizer = optimizer_adadelta(lr = 1.1),
metrics   = c('accuracy')
)
## And then we train :)
history = model %>% fit(
x = x_train, y = y_train,
epochs           = 256,
batch_size       = 32,
validation_split = 0
)
plot(history)
## Output performance
perf = model %>% evaluate(x_test, y_test)
print(perf)
